/*
 This file is part of EngineRoom, Copyright (c) 2007-2010 Bjoern Kriews, Hamburg - All rights reserved.

 Redistribution and use in source and binary forms, with or without modification,
 are permitted provided that the following conditions are met:

 Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

 Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer
 in the documentation and/or other materials provided with the distribution.

 Neither the name of the author nor the names of its contributors may be used to endorse or promote products derived from this
 software without specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
 SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

// include the non-objc parts
#import "logpoints.c"

#import "CrossPlatform_NSString_CGGeometry.h"

#if MAINTAINER_WARNINGS
#warning BK: missing feature: recursive formatting
#endif

ER_SYMBOL_VISIBLE_EMBEDDED id ER_SYMBOL_EMBEDDED_NAME( logPointFormatObjCType ) (const char *type, void *data, const char *label) 
{
	if( NULL == type ) 
		return @"NILTYPE";

	id ret = nil;

	if('r' == *type) { // const
		++type;
	}

	void *ptr = *(void **) data;
		
	
	switch( *type ) {
		case '@':
			ret = ptr ? [(id) ptr description] : @"nil"; break;
					
		case '#':
			ret = ptr ? [(id) ptr description] : @"Nil"; break;

		case '*': ret = [NSString stringWithFormat: @"\"%s\"", *(char **)data]; break;			

		case 'c': ret = [NSString stringWithFormat: @"%ld $%02lx", (long) *(char *)data, (unsigned long) *(unsigned char *)data]; break;
		case 'C': ret = [NSString stringWithFormat: @"%luU $%02lx", (unsigned long) *(unsigned char *)data, (unsigned long) *(unsigned char *)data]; break;

		case 's': ret = [NSString stringWithFormat: @"%ld $%04lx", (long) *(short *)data, (unsigned long) *(unsigned short *)data]; break;
		case 'S': ret = [NSString stringWithFormat: @"%luU $%04lx", (unsigned long) *(unsigned short *)data, (unsigned long) *(unsigned short *)data]; break;
						 
		case 'i': ret = [NSString stringWithFormat: @"%ld $%08lx", (long) *(int *)data, (unsigned long) *(unsigned int *)data]; break;
		case 'I': ret = [NSString stringWithFormat: @"%luU $%08lx", (unsigned long) *(unsigned int *)data, (unsigned long) *(unsigned int *)data]; break;						 

		case 'l': ret = [NSString stringWithFormat: @"%ldL $%08lx", *(long *)data, *(unsigned long *)data]; break;
		case 'L': ret = [NSString stringWithFormat: @"%luLU $%08lx", *(unsigned long *)data, *(unsigned long *)data]; break;						 						 

		case 'q': ret = [NSString stringWithFormat: @"%lldLL $%016llx", *(long long *)data, *(unsigned long long *)data]; break;
		case 'Q': ret = [NSString stringWithFormat: @"%lluLLU $%016llx", *(unsigned long long *)data, *(unsigned long long *)data]; break;						 						 

		case 'f': ret = [NSString stringWithFormat: @"%.*gf", __FLT_DIG__, *(float *)data]; break;
		case 'd': ret = [NSString stringWithFormat: @"%.*lgd", __DBL_DIG__, *(double *)data]; break;						 
						 
		/* warning: not officially supported - not generated by @encode but works in NSValue */
		case 'D': ret = [NSString stringWithFormat: @"%.*LgD", __LDBL_DIG__, *(long double *)data]; break;
			

		case ':': ret = NSStringFromSelector(*(SEL*)data); break;

		case '{': 
			if( 0 == strncmp(type+1, "_NSRange=", 9) ) {
				ret = NSStringFromRange( *(NSRange *) data);
#if TARGET_OS_OSX
			} else if( 0 == strncmp(type+1, "_NSPoint=", 9) ) {
				ret = NSStringFromPoint( *(NSPoint *) data);
			} else if( 0 == strncmp(type+1, "_NSSize=", 8) ) {
				ret = NSStringFromSize( *(NSSize *) data);
			} else if( 0 == strncmp(type+1, "_NSRect=", 8) ) {
				ret = NSStringFromRect( *(NSRect *) data);
#endif
			} else if( 0 == strncmp(type+1, "CGPoint=", 8) ) {
				ret = NSStringFromCGPoint( *(CGPoint *) data);
			} else if( 0 == strncmp(type+1, "CGSize=", 7) ) {
				ret = NSStringFromCGSize( *(CGSize *) data);
			} else if( 0 == strncmp(type+1, "CGRect=", 7) ) {
				ret = NSStringFromCGRect( *(CGRect *) data);
			} else {
			  ret = [NSString stringWithFormat: @"struct(%s)", type]; break;
			}
			break;


		case '[': ret = [NSString stringWithFormat: @"array(%s)", type]; break;

		case '^': 

			if( 0 == strncmp(type+1, "{__CF", 5)) {
				if(	0 == strncmp(type+6, "String=", 7) || 0 == strncmp(type+6, "Number=", 7) ) {
					ret = [(id) ptr description];
				} else {

					ret = UTIL_AUTORELEASE_CF_AS_ID( CFCopyDescription( (CFTypeRef) ptr) );			
				}
			} else {
				switch( type[1] ) {
				
					case '{': ret = [NSString stringWithFormat: @"struct*(%s): %p", type, ptr]; break;
					case '?': ret = [NSString stringWithFormat: @"func*: %p", ptr]; break;
					case '^': ret = [NSString stringWithFormat: @"ptr*: %p", ptr]; break;
					case '*': ret = [NSString stringWithFormat: @"char**: %p", ptr]; break;
					case 'v': ret = [NSString stringWithFormat: @"void*: %p", ptr]; break;

					case 'B': 
					case 'c': 
					case 'C': 
					case 's': 
					case 'S': 
					case 'i': 
					case 'I': 
					case 'l': 
					case 'L': 
					case 'q': 
					case 'Q': 
					case 'f': 
					case 'd': 
					case 'D': /* won't be seen - no special case code - so it is ^d */
					case '@': 
					case '#': 
					case ':': 
						ret = [NSString stringWithFormat: @"basic(%c)*: %p", type[1], ptr]; break;

					default:
						ret = [NSString stringWithFormat: @"other(%c)*: %p", type[1], ptr]; break;
				}
			}
			break;

		case 'B': ret = @"C++ Bool or C99 _Bool - still unsupported"; break;
		case 'b': ret = @"bitfield - still unsupported"; break;

		case '?': ret = @"unknown type (?)"; break;
		
		default:
			ret = [NSString stringWithFormat: @"unknown type character '%c'", *type];
			break;
	}
		
	return [NSString stringWithFormat: @"%s%s%@", 
		label && *label ? label : "",
		label && *label ? ": " : "",
		ret ? ret : [NSString stringWithFormat: @"type not decoded (%s)", type]];

}


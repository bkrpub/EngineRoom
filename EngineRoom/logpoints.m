//
//  $Id: logpoints.m 762 2009-02-21 23:56:12Z bkr $
//

#include "logpoints.c"

#import "CrossPlatform.h"

#warning BK: missing feature: recursive formatting
id logPointFormatObjCType(const char *type, void *data, const char *label) 
{
	if( NULL == type ) 
		return @"NILTYPE";

	id ret = nil;

	if('r' == *type) { // const
		++type;
	}

	void *ptr = *(void **) data;
		
	
	switch( *type ) {
		case '@':
		case '#':
			ret = [(id) ptr description]; break;

		case '*': ret = [NSString stringWithFormat: @"char*: '%s'", *(char **)data]; break;

		case 'c': ret = [NSString stringWithFormat: @"char: 0x%02hhx", *(char *)data]; break;
		case 'C': ret = [NSString stringWithFormat: @"uchar: 0x%02hhx", *(unsigned char *)data]; break;
		case 's': ret = [NSString stringWithFormat: @"short: 0x%02hx", *(short *)data]; break;
		case 'S': ret = [NSString stringWithFormat: @"ushort: 0x%02hx", *(unsigned short *)data]; break;
		case 'i': ret = [NSString stringWithFormat: @"int: 0x%02x", *(int *)data]; break;
		case 'I': ret = [NSString stringWithFormat: @"uint: 0x%02x", *(unsigned int *)data]; break;
		case 'l': ret = [NSString stringWithFormat: @"long: 0x%02lx", *(long *)data]; break;
		case 'L': ret = [NSString stringWithFormat: @"ulong: 0x%02lx", *(unsigned long *)data]; break;
		case 'q': ret = [NSString stringWithFormat: @"quad: 0x%02llx", *(long long *)data]; break;
		case 'Q': ret = [NSString stringWithFormat: @"uquad: 0x%02llx", *(unsigned long long *)data]; break;
		case 'f': ret = [NSString stringWithFormat: @"float: %.*g", __FLT_DIG__, *(float *)data]; break;
		case 'd': ret = [NSString stringWithFormat: @"double: %.*lg", __DBL_DIG__, *(double *)data]; break;

		/* warning: not officially supported - not generated by @encode but works in NSValue */
		case 'D': ret = [NSString stringWithFormat: @"double: %.*Lg", __LDBL_DIG__, *(long double *)data]; break;

		case ':': ret = NSStringFromSelector(*(SEL*)data); break;

		case '{': 
			if( 0 == strncmp(type+1, "_NSRange=", 9) ) {
				ret = NSStringFromRange( *(NSRange *) data);
#if TARGET_OS_OSX
			} else if( 0 == strncmp(type+1, "_NSPoint=", 9) ) {
				ret = NSStringFromPoint( *(NSPoint *) data);
			} else if( 0 == strncmp(type+1, "_NSSize=", 8) ) {
				ret = NSStringFromSize( *(NSSize *) data);
			} else if( 0 == strncmp(type+1, "_NSRect=", 8) ) {
				ret = NSStringFromRect( *(NSRect *) data);
#endif
			} else if( 0 == strncmp(type+1, "CGPoint=", 8) ) {
				ret = NSStringFromCGPoint( *(CGPoint *) data);
			} else if( 0 == strncmp(type+1, "CGSize=", 7) ) {
				ret = NSStringFromCGSize( *(CGSize *) data);
			} else if( 0 == strncmp(type+1, "CGRect=", 7) ) {
				ret = NSStringFromCGRect( *(CGRect *) data);
			} else {
				ret = [NSString stringWithFormat: @"struct(%s)", type]; break;
			}
			break;


		case '[': ret = [NSString stringWithFormat: @"array(%s)", type]; break;

		case '^': 

			if( 0 == strncmp(type+1, "{__CF", 5)) {
				if(	0 == strncmp(type+6, "String=", 7) || 0 == strncmp(type+6, "Number=", 7) ) {
					ret = [(id) ptr description];
				} else {

					ret = UTIL_AUTORELEASE_CF_AS_ID( CFCopyDescription( (CFTypeRef) ptr) );			
				}
			} else {
				switch( type[1] ) {
				
					case '{': ret = [NSString stringWithFormat: @"struct*(%s): %p", type, ptr]; break;
					case '?': ret = [NSString stringWithFormat: @"func*: %p", ptr]; break;
					case '^': ret = [NSString stringWithFormat: @"ptr*: %p", ptr]; break;
					case '*': ret = [NSString stringWithFormat: @"char**: %p", ptr]; break;
					case 'v': ret = [NSString stringWithFormat: @"void*: %p", ptr]; break;

					case 'B': 
					case 'c': 
					case 'C': 
					case 's': 
					case 'S': 
					case 'i': 
					case 'I': 
					case 'l': 
					case 'L': 
					case 'q': 
					case 'Q': 
					case 'f': 
					case 'd': 
					case 'D': /* won't be seen - no special case code - so it is ^d */
					case '@': 
					case '#': 
					case ':': 
						ret = [NSString stringWithFormat: @"basic(%c)*: %p", type[1], ptr]; break;

					default:
						ret = [NSString stringWithFormat: @"other(%c)*: %p", type[1], ptr]; break;
				}
			}
			break;

		case 'B': ret = @"C++ Bool or C99 _Bool - still unsupported"; break;
		case 'b': ret = @"bitfield - still unsupported"; break;

		case '?': ret = @"unknown type (?)"; break;
		
		default:
			ret = [NSString stringWithFormat: @"unknown type character '%c'", *type];
			break;
	}
		
	return ret ? [NSString stringWithFormat: @"%s%s%@", 
		label && *label ? label : "",
		label && *label ? ": " : "",
		ret] : [NSString stringWithFormat: @"type not decoded (%s)", type];

}
